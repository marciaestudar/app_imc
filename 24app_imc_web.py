# -*- coding: utf-8 -*-
"""24app_imc_web.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Uf33Ge6oJ_yzmszZD2GSOQzPe6vmKioy
"""

import streamlit as st
import pandas as pd
# As bibliotecas plotly.express e datetime n√£o s√£o mais necess√°rias para esta vers√£o
# import plotly.express as px
# from datetime import datetime

class CalculadoraIMC:
    def __init__(self):
        self.classificacoes = [
            {"max": 18.4, "cat": "Abaixo do peso", "desc": "Indicado buscar orienta√ß√£o para ganho de peso saud√°vel.", "cor": "warning"},
            {"max": 24.9, "cat": "Peso normal", "desc": "Seu peso est√° saud√°vel. Mantenha h√°bitos equilibrados.", "cor": "success"},
            {"max": 29.9, "cat": "Sobrepeso", "desc": "Recomenda-se orienta√ß√£o para plano de emagrecimento.", "cor": "warning"},
            {"max": 34.9, "cat": "Obesidade Grau I", "desc": "Acompanhamento profissional importante.", "cor": "danger"},
            {"max": 39.9, "cat": "Obesidade Grau II", "desc": "Risco elevado. Procure ajuda urgente.", "cor": "danger"},
            {"max": float('inf'), "cat": "Obesidade Grau III", "desc": "Risco muito elevado. Tratamento rigoroso.", "cor": "danger"}
        ]

    def calcular_imc(self, peso, altura):
        if altura <= 0 or peso <= 0:
            raise ValueError("Valores devem ser positivos.")
        return peso / (altura ** 2)

    def classificar_imc(self, imc):
        for classe in self.classificacoes:
            if imc <= classe["max"]:
                return (classe["cat"], classe["desc"], classe["cor"])
        return self.classificacoes[-1]['cat'], self.classificacoes[-1]['desc'], self.classificacoes[-1]['cor']

    def obter_dicas(self, classificacao, idade):
        dicas = [
            "### üìå Dicas Gerais para uma Alimenta√ß√£o Saud√°vel",
            "- **Priorize alimentos in natura ou minimamente processados:** Frutas, verduras, legumes, gr√£os inteiros, carnes magras, ovos.",
            "- **Evite alimentos ultraprocessados:** Refrigerantes, biscoitos recheados, salgadinhos, embutidos - ricos em a√ß√∫car, s√≥dio e gorduras n√£o saud√°veis.",
            "- **Cozinhe seus pr√≥prios alimentos:** Controle os ingredientes e qualidade das prepara√ß√µes.",
            "- **Fa√ßa refei√ß√µes conscientes:** Coma devagar, em ambiente tranquilo e preferencialmente em companhia.",
            "- **Hidrate-se adequadamente:** Beba √°gua ao longo do dia (6-8 copos di√°rios).",
            "- **Use √≥leos, sal e a√ß√∫car com modera√ß√£o:** Prefira vers√µes naturais e evite excessos.",
            "- **Mantenha-se ativo:** Combine alimenta√ß√£o saud√°vel com atividade f√≠sica regular.",
            "- **Varie os alimentos:** Consuma diferentes grupos alimentares ao longo da semana.",
            "- **Aten√ß√£o aos r√≥tulos:** Leia as informa√ß√µes nutricionais dos produtos industrializados."
        ]

        if "Abaixo do peso" in classificacao:
            dicas.extend([
                "\n### ü•ë Estrat√©gias para Ganho de Peso Saud√°vel - Recomenda√ß√µes M√©dicas de Prefer√™ncia:",
                "- Consuma alimentos ricos em nutrientes e calorias saud√°veis: abacate, azeite, castanhas",
                "- Fa√ßa 6 refei√ß√µes di√°rias em por√ß√µes menores",
                "- Inclua prote√≠nas em todas as refei√ß√µes principais",
                "- Consulte um nutricionista para plano individualizado"
            ])
        elif "Sobrepeso" in classificacao or "Obesidade" in classificacao:
            dicas.extend([
                "\n### ü•¶ Estrat√©gias para Emagrecimento Saud√°vel - Recomenda√ß√µes M√©dicas de Prefer√™ncia:",
                "- Aumente o consumo de fibras: vegetais folhosos, frutas com casca, gr√£os integrais",
                "- Consuma prote√≠nas magras: peixes, frango, ovos, leguminosas",
                "- Reduza o consumo de bebidas alco√≥licas",
                "- Consulte um nutricionista para plano individualizado",
                "- Reduza gradualmente o consumo de a√ß√∫cares e gorduras saturadas",
                "- Mantenha regularidade nas refei√ß√µes para evitar compuls√µes",
                "- Importante nesse processo - Pratique atividade f√≠sica regular com orienta√ß√£o profissional"
            ])
        elif "Peso normal" in classificacao:
            dicas.extend([
                "\n### ‚úÖ Mantenha seus H√°bitos Saud√°veis:",
                "- Continue com a rotina alimentar equilibrada",
                "- Monitore seu peso periodicamente",
                "- Experimente novas receitas saud√°veis",
                "- Importante nesse processo - Mantenha check-ups regulares"
            ])

        if idade < 18:
            dicas.extend([
                f"\n### üëß Considera√ß√µes para {idade} anos:",
                "- Fundamental papel da fam√≠lia na oferta de alimentos saud√°veis",
                "- Evite a√ß√∫car para menores de 2 anos e modere para maiores",
                "- Priorize lanches naturais: frutas, sandu√≠ches integrais",
                "- Mantenha hor√°rios regulares para as refei√ß√µes"
            ])
        elif idade >= 60:
            dicas.extend([
                f"\n### üëµ Considera√ß√µes para {idade} anos:",
                "- Aumente consumo de prote√≠nas para manter massa muscular",
                "- Aten√ß√£o √† hidrata√ß√£o (a sede pode diminuir com a idade)",
                "- Consuma alimentos ricos em c√°lcio e vitamina D",
                "- Adapte textura dos alimentos se necess√°rio"
            ])

        return "\n".join(dicas)

    def obter_resumos(self):
        return """
        ## üìö Refer√™ncias Cient√≠ficas

        ### Guias Oficiais:
        1. [Guia Alimentar para a Popula√ß√£o Brasileira](https://bvsms.saude.gov.br/bvs/publicacoes/guia_alimentar_populacao_brasileira_2ed.pdf)
        2. [Guia para Crian√ßas Menores de 2 Anos](https://bvsms.saude.gov.br/bvs/publicacoes/guia_alimentar_crianca_brasileira_versao_resumida.pdf)

        ### Estudos Relevantes:
        3. [Alimenta√ß√£o Saud√°vel](https://bvsms.saude.gov.br/bvs/publicacoes/alimentacao_saudavel.pdf)
        4. [Cl√≠nica Einstein: Dietas & Emagrecimento](https://vidasaudavel.einstein.br/wp-content/uploads/2021/02/98.-Dietas-Emagrecimento.pdf)
        """

# Configura√ß√£o da P√°gina
st.set_page_config(
    page_title="Orienta√ß√µes b√°sicas",
    page_icon="ü•ó",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Interface Principal
st.title("ü•ó Calculadora de IMC")
st.markdown("""
    *Calculadora de IMC com orienta√ß√µes baseadas em evid√™ncias cient√≠ficas:*
""")

# Inicializa a calculadora
calc = CalculadoraIMC()

# Inicializa o estado da sess√£o para os inputs, se ainda n√£o existirem
if 'peso_input_value' not in st.session_state:
    st.session_state.peso_input_value = None
if 'altura_input_value' not in st.session_state:
    st.session_state.altura_input_value = None
if 'idade_input_value' not in st.session_state:
    st.session_state.idade_input_value = None
if 'show_results' not in st.session_state: # Novo estado para controlar a exibi√ß√£o dos resultados
    st.session_state.show_results = False

# Entradas do Usu√°rio dentro de um formul√°rio
with st.form(key='form_imc'):
    col1, col2, col3 = st.columns(3)
    with col1:
        # Vincula o valor do input ao st.session_state
        peso = st.number_input("Peso (kg):", min_value=30.0, max_value=300.0, step=0.1,
                               value=st.session_state.peso_input_value, format="%.1f", key="peso_input",
                               help="Insira seu peso em quilogramas (ex: 70.5)")
    with col2:
        # Vincula o valor do input ao st.session_state
        altura = st.number_input("Altura (m):", min_value=1.0, max_value=2.5, step=0.01,
                                 value=st.session_state.altura_input_value, format="%.2f", key="altura_input",
                                 help="Insira sua altura em metros (ex: 1.75)")
    with col3:
        # Vincula o valor do input ao st.session_state
        idade = st.number_input("Idade (anos):", min_value=2, max_value=120, step=1,
                                value=st.session_state.idade_input_value, key="idade_input",
                                help="Insira sua idade em anos")

    # Bot√£o de submit do formul√°rio
    if st.form_submit_button("Calcular IMC e Obter Orienta√ß√µes", type="primary"):
        if peso is None or altura is None or idade is None:
            st.error("Por favor, preencha todos os campos!")
            st.session_state.show_results = False # Garante que os resultados n√£o apare√ßam
        else:
            try:
                imc = calc.calcular_imc(peso, altura)
                classificacao, descricao, cor = calc.classificar_imc(imc)

                # Armazena os resultados no session_state para exibi√ß√£o ap√≥s o submit
                st.session_state.imc_resultado = imc
                st.session_state.classificacao_resultado = classificacao
                st.session_state.descricao_resultado = descricao
                st.session_state.cor_resultado = cor
                st.session_state.dicas_resultado = calc.obter_dicas(classificacao, idade)
                st.session_state.resumos_resultado = calc.obter_resumos()
                st.session_state.show_results = True # Define para mostrar os resultados

            except Exception as e:
                st.error(f"Erro: {str(e)}")
                st.session_state.show_results = False # Garante que os resultados n√£o apare√ßam

# --- Exibi√ß√£o dos Resultados (fora do formul√°rio, controlada por st.session_state.show_results) ---
if st.session_state.show_results:
    st.success("An√°lise Completa Realizada!")

    with st.container():
        col_res1, col_res2 = st.columns([1, 2])

        with col_res1:
            st.metric("IMC Calculado", f"{st.session_state.imc_resultado:.1f}")
            st.markdown(f"""
                **Classifica√ß√£o:**
                :{st.session_state.cor_resultado}[**{st.session_state.classificacao_resultado}**]
                _{st.session_state.descricao_resultado}_
            """)

            st.markdown("---")

            # --- Tabela de Refer√™ncia do IMC ---
            st.subheader("‚öñÔ∏è Tabela de Refer√™ncia do IMC")
            df_classificacoes = pd.DataFrame(calc.classificacoes)
            df_classificacoes = df_classificacoes.rename(columns={
                "max": "IMC M√°ximo",
                "cat": "Categoria",
                "desc": "Descri√ß√£o",
                "cor": "Cor (Interno)"
            })
            df_classificacoes['IMC M√°ximo'] = df_classificacoes['IMC M√°ximo'].apply(
                lambda x: f"< {x:.1f}" if x != float('inf') else ">= 40.0"
            )
            df_classificacoes_display = df_classificacoes[['IMC M√°ximo', 'Categoria', 'Descri√ß√£o']]

            st.dataframe(df_classificacoes_display, use_container_width=True, hide_index=True)


        with col_res2:
            st.markdown(st.session_state.dicas_resultado)

            with st.expander("üîç Refer√™ncias Cient√≠ficas", expanded=True):
                st.markdown(st.session_state.resumos_resultado)

    st.markdown("---") # Linha divis√≥ria ap√≥s os resultados

    # --- Bot√£o "Novo C√°lculo" (fora do formul√°rio) ---
    # Este bot√£o apenas limpa os inputs e esconde os resultados, sem for√ßar um rerun completo
    if st.button("Novo C√°lculo de IMC", key="novo_calculo_button"):
        st.session_state.peso_input_value = None
        st.session_state.altura_input_value = None
        st.session_state.idade_input_value = None
        st.session_state.show_results = False # Esconde os resultados
        # O Streamlit far√° um rerun automaticamente ap√≥s a altera√ß√£o do session_state
        # e os campos aparecer√£o vazios novamente.

st.markdown("---")
st.markdown("""
    **Desenvolvido por:** Marcia Romanato
""")