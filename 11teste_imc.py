# -*- coding: utf-8 -*-
"""11teste_imc.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h2HZiYRL1dTZnY99C2SZarOgwexnnbra
"""

import streamlit as st
import pandas as pd # <-- Esta biblioteca precisa ser listada em requirements.txt

# --- Classe CalculadoraIMC ---
class CalculadoraIMC:
    def __init__(self):
        pass

    def calcular_imc(self, peso, altura):
        """
        Calcula o √çndice de Massa Corporal (IMC).
        Args:
            peso (float): Peso em quilogramas (kg).
            altura (float): Altura em metros (m).
        Returns:
            float: O valor do IMC.
        Raises:
            ValueError: Se peso ou altura forem zero ou negativos.
        """
        if altura <= 0 or peso <= 0:
            raise ValueError("Peso e altura devem ser valores positivos.")
        return peso / (altura ** 2)

    def classificar_imc(self, imc):
        """
        Classifica o IMC de acordo com a tabela da OMS.
        Args:
            imc (float): O valor do IMC.
        Returns:
            tuple: Uma tupla contendo a classifica√ß√£o do IMC e uma breve descri√ß√£o.
        """
        if imc < 18.5:
            return "Abaixo do peso", "Indicado buscar orienta√ß√£o para ganho de peso saud√°vel.", "warning"
        elif 18.5 <= imc <= 24.9:
            return "Peso normal", "Seu peso est√° saud√°vel. Mantenha h√°bitos alimentares equilibrados e atividade f√≠sica.", "success"
        elif 25 <= imc <= 29.9:
            return "Sobrepeso", "Recomenda-se buscar orienta√ß√£o para um plano de emagrecimento saud√°vel.", "warning"
        elif 30 <= imc <= 34.9:
            return "Obesidade Grau I", "Importante buscar acompanhamento profissional para um plano de emagrecimento e melhora da sa√∫de.", "danger"
        elif 35 <= imc <= 39.9:
            return "Obesidade Grau II", "Risco elevado. Procure acompanhamento m√©dico e nutricional urgente para um plano de emagrecimento.", "danger"
        else:
            return "Obesidade Grau III (M√≥rbida)", "Risco muito elevado. √â fundamental buscar acompanhamento m√©dico e nutricional para um plano de tratamento rigoroso.", "danger"

    def obter_dicas_dieta(self, classificacao_imc, idade):
        """
        Fornece dicas de dieta baseadas na classifica√ß√£o do IMC e na idade.
        As dicas s√£o baseadas nos arquivos PDF fornecidos.
        """
        dicas = []

        dicas.append("### Dicas Gerais para uma Alimenta√ß√£o Saud√°vel")
        dicas.append("- Priorize alimentos *in natura* ou minimamente processados (frutas, verduras, legumes, gr√£os inteiros, carnes magras, ovos).")
        dicas.append("- Evite alimentos **ultraprocessados** (refrigerantes, biscoitos recheados, salgadinhos, embutidos) pois s√£o ricos em a√ß√∫car, s√≥dio e gorduras n√£o saud√°veis.")
        dicas.append("- Cozinhe seus pr√≥prios alimentos sempre que poss√≠vel. Isso ajuda a controlar os ingredientes.")
        dicas.append("- Fa√ßa das refei√ß√µes momentos de prazer e aten√ß√£o, comendo devagar e em companhia, se poss√≠vel.")
        dicas.append("- Beba bastante √°gua ao longo do dia. A √°gua √© essencial para diversas fun√ß√µes do corpo.")
        dicas.append("- Consuma √≥leos, sal e a√ß√∫car em pequenas quantidades, preferindo vers√µes naturais e evitando o excesso.")
        dicas.append("- Seja ativo! A combina√ß√£o de alimenta√ß√£o saud√°vel e atividade f√≠sica √© fundamental para a sa√∫de.")

        if "Abaixo do peso" in classificacao_imc:
            dicas.append("\n### Para 'Abaixo do peso':")
            dicas.append("- Busque um nutricionista para um plano de ganho de peso saud√°vel, focado em nutrientes e n√£o apenas calorias vazias.")
            dicas.append("- Aumente o consumo de alimentos ricos em energia e nutrientes, como abacate, azeite, castanhas e sementes.")
            dicas.append("- Fa√ßa refei√ß√µes menores e mais frequentes ao longo do dia.")
        elif "Sobrepeso" in classificacao_imc or "Obesidade" in classificacao_imc:
            dicas.append("\n### Para 'Sobrepeso' ou 'Obesidade':")
            dicas.append("- O foco √© a reeduca√ß√£o alimentar. Elimine ou reduza drasticamente alimentos ultraprocessados.")
            dicas.append("- Aumente o consumo de fibras (presentes em frutas, vegetais, gr√£os integrais, leguminosas) para aumentar a saciedade.")
            dicas.append("- Invista em alimentos que desincham e t√™m a√ß√£o anti-inflamat√≥ria, como aqueles ricos em √¥mega-3 (salm√£o, sardinha, linha√ßa).")
            dicas.append("- Consulte um profissional para um plano alimentar individualizado e orienta√ß√£o sobre atividade f√≠sica adequada.")
            dicas.append("- Evite dietas muito restritivas, que podem levar ao efeito sanfona.")
        elif "Peso normal" in classificacao_imc:
            dicas.append("\n### Para 'Peso normal':")
            dicas.append("- Continue com uma alimenta√ß√£o equilibrada, variada e colorida.")
            dicas.append("- Mantenha a ingest√£o de √°gua adequada e a pr√°tica regular de atividade f√≠sica.")
            dicas.append("- Fique atento aos sinais de fome e saciedade do seu corpo.")

        if idade < 18:
            dicas.append(f"\n### Considera√ß√µes para sua idade ({idade} anos):")
            dicas.append("- Para crian√ßas e adolescentes, √© crucial o papel da fam√≠lia na oferta de alimentos saud√°veis e no exemplo.")
            dicas.append("- Evitar a√ß√∫car e produtos a√ßucarados para crian√ßas menores de 3 anos √© fundamental. Para os mais velhos, moderar o consumo.")
            dicas.append("- Priorize a alimenta√ß√£o em fam√≠lia, em um ambiente prazeroso e sem distra√ß√µes como TV/celular.")
        elif idade >= 60:
            dicas.append(f"\n### Considera√ß√µes para sua idade ({idade} anos):")
            dicas.append("- Para idosos, a alimenta√ß√£o deve ser rica em nutrientes para manter a massa muscular e √≥ssea.")
            dicas.append("- Aten√ß√£o √† hidrata√ß√£o, pois a sensa√ß√£o de sede pode diminuir com a idade.")
            dicas.append("- Pode ser necess√°rio um acompanhamento nutricional para adequar a dieta a poss√≠veis condi√ß√µes de sa√∫de.")

        return "\n".join(dicas)

    def obter_resumos_importantes(self):
        """
        Retorna resumos de assuntos importantes dos arquivos em anexo, com refer√™ncias e links.
        """
        return """
## Resumos de Assuntos Importantes e Refer√™ncias

### 1. Alimenta√ß√£o Saud√°vel e Guias Alimentares:
- O [Guia Alimentar para a Popula√ß√£o Brasileira (2¬™ edi√ß√£o)](https://www.gov.br/saude/pt-br/centrais-de-conteudo/publicacoes/publicacoes-saude-brasil/guia-alimentar-para-a-populacao-brasileira/view) √© uma refer√™ncia fundamental. Ele divide os alimentos em categorias baseadas no grau de processamento (in natura, minimamente processados, processados e ultraprocessados) e enfatiza a base alimentar em produtos naturais.
- A regra de ouro √© "coma alimentos de verdade", ou seja, aqueles encontrados na natureza ou que passaram por m√≠nimas altera√ß√µes.
- **Refer√™ncia:** Brasil. Minist√©rio da Sa√∫de. Secretaria de Aten√ß√£o √† Sa√∫de. Departamento de Aten√ß√£o B√°sica. **Guia alimentar para a popula√ß√£o brasileira**. 2. ed. Bras√≠lia: Minist√©rio da Sa√∫de, 2014.

### 2. Emagrecimento Saud√°vel:
- O emagrecimento sustent√°vel √© um processo que envolve mudan√ßa de h√°bitos e n√£o apenas dietas restritivas.
- Aumentar a sensa√ß√£o de saciedade com fibras (frutas, vegetais, gr√£os integrais, leguminosas) e prote√≠nas magras √© uma estrat√©gia eficaz.
- Alimentos com propriedades termog√™nicas e anti-inflamat√≥rias (ch√° de hibisco, pimentas, gengibre, alimentos ricos em √¥mega-3) podem auxiliar, mas n√£o s√£o solu√ß√µes milagrosas.
- **Refer√™ncia:** Conte√∫do extra√≠do do arquivo `ebook-emagrecimento.pdf`, que aborda o processo de emagrecimento de forma saud√°vel e sustent√°vel.

### 3. Import√¢ncia da √Ågua e Fibras:
- A √°gua √© crucial para hidrata√ß√£o, transporte de nutrientes e funcionamento dos √≥rg√£os. Recomenda-se ingest√£o adequada ao longo do dia.
- As fibras alimentares promovem a sa√∫de intestinal, ajudam no controle do colesterol e da glicemia, e contribuem para a saciedade.
- **Refer√™ncia:** Informa√ß√µes baseadas nos arquivos `manual_de_nutricao.pdf` e `alimentacao_saudavel.pdf`, que detalham a import√¢ncia desses componentes.

### 4. Cuidados com Ultraprocessados:
- Alimentos ultraprocessados s√£o formulados para serem muito palat√°veis e muitas vezes levam ao consumo excessivo.
- S√£o associados a maior risco de obesidade, doen√ßas card√≠acas, diabetes e outros problemas de sa√∫de.
- **Refer√™ncia:** Amplamente discutido no [Guia Alimentar para a Popula√ß√£o Brasileira](https://www.gov.br/saude/pt-br/centrais-de-conteudo/publicacoes/publicacoes-saude-brasil/guia-alimentar-para-a-populacao-brasileira/view) e nos materiais `manual_de_nutricao.pdf` e `alimentacao_saudavel.pdf`.

### 5. Alimenta√ß√£o em Diferentes Fases da Vida:
- Crian√ßas e adolescentes necessitam de uma alimenta√ß√£o balanceada para crescimento e desenvolvimento. A fam√≠lia tem um papel vital.
- Idosos devem ter aten√ß√£o especial √† densidade nutricional dos alimentos para manter a massa muscular e √≥ssea.
- **Refer√™ncia:** Conte√∫do adaptado do `EBOOK ALIMENTA√á√ÉO SAUD√ÅVEL.pdf` (foco em crian√ßas) e `alimentacao_saudavel.pdf` (aborda diversas faixas et√°rias, incluindo idosos). Para crian√ßas menores de 2 anos, consulte tamb√©m o [Guia Alimentar para Crian√ßas Brasileiras menores de 2 anos](https://www.gov.br/saude/pt-br/centrais-de-conteudo/publicacoes/publicacoes-saude-brasil/2019/guia-alimentar-para-criancas-brasileiras-menores-de-2-anos).
        """

# --- Configura√ß√£o da Aplica√ß√£o Streamlit ---

st.set_page_config(
    page_title="Calculadora de IMC e Dicas de Sa√∫de",
    page_icon="üçé",
    layout="centered"
)

st.title("üçé Calculadora de IMC e Dicas de Sa√∫de")
st.markdown("Calcule seu √çndice de Massa Corporal (IMC) e receba dicas personalizadas de alimenta√ß√£o e sa√∫de.")

# Inicializa a calculadora
calculadora = CalculadoraIMC()

# Usamos um estado de sess√£o para controlar se j√° calculamos o IMC
# Isso permite que os resultados e o bot√£o "Novo C√°lculo" s√≥ apare√ßam ap√≥s o primeiro c√°lculo.
if 'calculado' not in st.session_state:
    st.session_state.calculado = False

# --- Entradas do Usu√°rio ---
st.header("Seus Dados")

col1, col2, col3 = st.columns(3)

with col1:
    # Campos vazios, sem valor padr√£o (value=None), para for√ßar a entrada do usu√°rio.
    # Adicionado 'help' para guiar o usu√°rio no preenchimento.
    peso = st.number_input("Peso (kg):", min_value=1.0, max_value=300.0, value=None, step=0.1, format="%.1f", key="peso_input", help="Insira seu peso em quilogramas (ex: 70.5)")
with col2:
    altura = st.number_input("Altura (m):", min_value=0.50, max_value=2.50, value=None, step=0.01, format="%.2f", key="altura_input", help="Insira sua altura em metros (ex: 1.75)")
with col3:
    idade = st.number_input("Idade (anos):", min_value=1, max_value=120, value=None, step=1, key="idade_input", help="Insira sua idade em anos")

# Bot√£o para calcular
if st.button("Calcular IMC", key="calcular_button"):
    # Verifica se todos os campos foram preenchidos antes de tentar calcular
    if peso is None or altura is None or idade is None:
        st.warning("Por favor, preencha todos os campos (peso, altura e idade) para calcular o IMC.")
    else:
        try:
            imc = calculadora.calcular_imc(peso, altura)
            classificacao, descricao, cor = calculadora.classificar_imc(imc)

            st.session_state.calculado = True # Marca que o c√°lculo foi feito com sucesso

            st.subheader("Seu Resultado:")
            st.write(f"Seu IMC √©: **{imc:.2f}**")

            # Exibe a classifica√ß√£o com cor e √≠cone apropriados
            if cor == "success":
                st.success(f"**Classifica√ß√£o:** {classificacao}")
            elif cor == "warning":
                st.warning(f"**Classifica√ß√£o:** {classificacao}")
            else: # Cor "danger"
                st.error(f"**Classifica√ß√£o:** {classificacao}")

            st.info(f"**Observa√ß√£o:** {descricao}")

            st.markdown("---") # Linha divis√≥ria

            # --- Dicas de Dieta ---
            st.subheader("Dicas de Dieta e Sa√∫de")
            dicas = calculadora.obter_dicas_dieta(classificacao, idade)
            st.markdown(dicas)

            st.markdown("---") # Linha divis√≥ria

            # --- Resumos Importantes ---
            resumos = calculadora.obter_resumos_importantes()
            st.markdown(resumos)

        except ValueError as e:
            st.error(f"Erro: {e}")
        except Exception as e:
            st.error(f"Ocorreu um erro inesperado: {e}")

# --- Bot√£o "Novo C√°lculo" ---
# Este bot√£o s√≥ aparece depois que o c√°lculo inicial √© feito (st.session_state.calculado √© True)
if st.session_state.calculado:
    st.markdown("---")
    # Este bot√£o recarrega a aplica√ß√£o do zero, limpando todos os campos e sa√≠das.
    # √â a forma mais eficaz de "reiniciar" a UI no Streamlit.
    if st.button("Novo C√°lculo de IMC", key="novo_calculo_button"):
        st.session_state.calculado = False # Reseta o estado para que o app volte ao in√≠cio
        st.experimental_rerun() # For√ßa a recarga completa do script

st.markdown("---")
st.markdown("Criado com ‚ù§Ô∏è e dados de materiais de nutri√ß√£o e sa√∫de p√∫blica.")
st.markdown("Lembre-se: este √© um aplicativo informativo. Sempre consulte um profissional de sa√∫de para orienta√ß√µes personalizadas.")