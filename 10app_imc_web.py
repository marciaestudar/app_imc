# -*- coding: utf-8 -*-
"""10app_imc_web.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BzR2sOEfFwe4hFsaJWPYTS7fFN-PG15L
"""

import streamlit as st
import pandas as pd
import plotly.express as px # <-- Esta √© a linha que estava causando o erro no deploy
# from datetime import datetime # N√£o √© estritamente necess√°rio para o uso atual, mas se for usar outras fun√ß√µes, pode manter

class CalculadoraIMC:
    def __init__(self):
        # A nova estrutura de classifica√ß√µes √© excelente!
        self.classificacoes = [
            {"max": 18.4, "cat": "Abaixo do peso", "desc": "Indicado buscar orienta√ß√£o para ganho de peso saud√°vel.", "cor": "warning"},
            {"max": 24.9, "cat": "Peso normal", "desc": "Seu peso est√° saud√°vel. Mantenha h√°bitos equilibrados.", "cor": "success"},
            {"max": 29.9, "cat": "Sobrepeso", "desc": "Recomenda-se orienta√ß√£o para plano de emagrecimento.", "cor": "warning"},
            {"max": 34.9, "cat": "Obesidade Grau I", "desc": "Acompanhamento profissional importante.", "cor": "danger"},
            {"max": 39.9, "cat": "Obesidade Grau II", "desc": "Risco elevado. Procure ajuda urgente.", "cor": "danger"},
            {"max": float('inf'), "cat": "Obesidade Grau III", "desc": "Risco muito elevado. Tratamento rigoroso.", "cor": "danger"}
        ]

    def calcular_imc(self, peso, altura):
        if altura <= 0 or peso <= 0:
            raise ValueError("Valores devem ser positivos.")
        return peso / (altura ** 2)

    def classificar_imc(self, imc):
        for classe in self.classificacoes:
            if imc <= classe["max"]:
                return (classe["cat"], classe["desc"], classe["cor"])
        # Caso o IMC seja maior que todas as categorias definidas (o que n√£o deve acontecer com float('inf'))
        return self.classificacoes[-1]['cat'], self.classificacoes[-1]['desc'], self.classificacoes[-1]['cor']

    # Nome do m√©todo padronizado para "obter_dicas"
    def obter_dicas(self, classificacao, idade):
        dicas = [
            "### üìå Dicas Gerais para uma Alimenta√ß√£o Saud√°vel",
            "- **Priorize alimentos in natura ou minimamente processados:** Frutas, verduras, legumes, gr√£os inteiros, carnes magras, ovos.",
            "- **Evite alimentos ultraprocessados:** Refrigerantes, biscoitos recheados, salgadinhos, embutidos - ricos em a√ß√∫car, s√≥dio e gorduras n√£o saud√°veis.",
            "- **Cozinhe seus pr√≥prios alimentos:** Controle os ingredientes e qualidade das prepara√ß√µes.",
            "- **Fa√ßa refei√ß√µes conscientes:** Coma devagar, em ambiente tranquilo e preferencialmente em companhia.",
            "- **Hidrate-se adequadamente:** Beba √°gua ao longo do dia (6-8 copos di√°rios).",
            "- **Use √≥leos, sal e a√ß√∫car com modera√ß√£o:** Prefira vers√µes naturais e evite excessos.",
            "- **Mantenha-se ativo:** Combine alimenta√ß√£o saud√°vel com atividade f√≠sica regular.",
            "- **Varie os alimentos:** Consuma diferentes grupos alimentares ao longo da semana.",
            "- **Aten√ß√£o aos r√≥tulos:** Leia as informa√ß√µes nutricionais dos produtos industrializados."
        ]

        if "Abaixo do peso" in classificacao:
            dicas.extend([
                "\n### ü•ë Estrat√©gias para Ganho de Peso Saud√°vel - Recomenda√ß√µes M√©dicas de Prefer√™ncia:",
                "- Consuma alimentos ricos em nutrientes e calorias saud√°veis: abacate, azeite, castanhas",
                "- Fa√ßa 6 refei√ß√µes di√°rias em por√ß√µes menores",
                "- Inclua prote√≠nas em todas as refei√ß√µes principais",
                "- Consulte um nutricionista para plano individualizado"
            ])
        elif "Sobrepeso" in classificacao or "Obesidade" in classificacao:
            dicas.extend([
                "\n### ü•¶ Estrat√©gias para Emagrecimento Saud√°vel - Recomenda√ß√µes M√©dicas de Prefer√™ncia:",
                "- Aumente o consumo de fibras: vegetais folhosos, frutas com casca, gr√£os integrais",
                "- Consuma prote√≠nas magras: peixes, frango, ovos, leguminosas",
                "- Reduza o consumo de bebidas alco√≥licas",
                "- Consulte um nutricionista para plano individualizado",
                "- Reduza gradualmente o consumo de a√ß√∫cares e gorduras saturadas",
                "- Mantenha regularidade nas refei√ß√µes para evitar compuls√µes",
                "- Importante nesse processo - Pratique atividade f√≠sica regular com orienta√ß√£o profissional"
            ])
        elif "Peso normal" in classificacao:
            dicas.extend([
                "\n### ‚úÖ Mantenha seus H√°bitos Saud√°veis:",
                "- Continue com a rotina alimentar equilibrada",
                "- Monitore seu peso periodicamente",
                "- Experimente novas receitas saud√°veis",
                "- Importante nesse processo - Mantenha check-ups regulares"
            ])

        if idade < 18:
            dicas.extend([
                f"\n### üëß Considera√ß√µes para {idade} anos:",
                "- Fundamental papel da fam√≠lia na oferta de alimentos saud√°veis",
                "- Evite a√ß√∫car para menores de 2 anos e modere para maiores",
                "- Priorize lanches naturais: frutas, sandu√≠ches integrais",
                "- Mantenha hor√°rios regulares para as refei√ß√µes"
            ])
        elif idade >= 60:
            dicas.extend([
                f"\n### üëµ Considera√ß√µes para {idade} anos:",
                "- Aumente consumo de prote√≠nas para manter massa muscular",
                "- Aten√ß√£o √† hidrata√ß√£o (a sede pode diminuir com a idade)",
                "- Consuma alimentos ricos em c√°lcio e vitamina D",
                "- Adapte textura dos alimentos se necess√°rio"
            ])

        return "\n".join(dicas)

    # Nome do m√©todo padronizado para "obter_resumos"
    def obter_resumos(self):
        return """
        ## üìö Refer√™ncias Cient√≠ficas

        ### Guias Oficiais:
        1. [Guia Alimentar para a Popula√ß√£o Brasileira](https://bvsms.saude.gov.br/bvs/publicacoes/guia_alimentar_populacao_brasileira_2ed.pdf)
        2. [Guia para Crian√ßas Menores de 2 Anos](https://bvsms.saude.gov.br/bvs/publicacoes/guia_alimentar_crianca_brasileira_versao_resumida.pdf)

        ### Estudos Relevantes:
        3. [Alimenta√ß√£o Saud√°vel](https://bvsms.saude.gov.br/bvs/publicacoes/alimentacao_saudavel.pdf)
        4. [Cl√≠nica Einstein: Dietas & Emagrecimento](https://vidasaudavel.einstein.br/wp-content/uploads/2021/02/98.-Dietas-Emagrecimento.pdf)
        """

# Configura√ß√£o da P√°gina
st.set_page_config(
    page_title="Orienta√ß√µes b√°sicas",
    page_icon="ü•ó",
    layout="wide", # Usando layout wide para melhor visualiza√ß√£o do gr√°fico e dicas
    initial_sidebar_state="expanded"
)

# Interface Principal
st.title("ü•ó Calculadora de IMC")
st.markdown("""
    *Calculadora de IMC com orienta√ß√µes baseadas em evid√™ncias cient√≠ficas:*
""")

# Entradas do Usu√°rio dentro de um formul√°rio
with st.form(key='form_imc'):
    col1, col2, col3 = st.columns(3)
    with col1:
        peso = st.number_input("Peso (kg):", min_value=30.0, max_value=300.0, step=0.1, value=None, format="%.1f") # Definir value=None para come√ßar vazio
    with col2:
        altura = st.number_input("Altura (m):", min_value=1.0, max_value=2.5, step=0.01, value=None, format="%.2f") # Definir value=None para come√ßar vazio
    with col3:
        idade = st.number_input("Idade (anos):", min_value=2, max_value=120, step=1, value=None) # Definir value=None para come√ßar vazio

    # Bot√£o de submit do formul√°rio
    if st.form_submit_button("Calcular IMC e Obter Orienta√ß√µes", type="primary"):
        try:
            # Verifica se todos os campos foram preenchidos
            if not all([peso, altura, idade]):
                st.error("Preencha todos os campos!")
            else:
                calc = CalculadoraIMC()
                imc = calc.calcular_imc(peso, altura)
                classificacao, descricao, cor = calc.classificar_imc(imc)

                st.success("An√°lise Completa Realizada!")

                # Exibi√ß√£o dos resultados e dicas em colunas
                with st.container():
                    col_res1, col_res2 = st.columns([1, 2])

                    with col_res1:
                        st.metric("IMC Calculado", f"{imc:.1f}")
                        st.markdown(f"""
                            **Classifica√ß√£o:**
                            :{cor}[**{classificacao}**]
                            _{descricao}_
                        """)

                        # Gr√°fico Plotly
                        # Cria um DataFrame para o gr√°fico (opcional, mas bom para plotly)
                        df_imc = pd.DataFrame({'Categoria': ['Seu IMC'], 'Valor': [imc]})

                        fig = px.bar(df_imc, x="Categoria", y="Valor",
                                     title="Posi√ß√£o nas Faixas de IMC",
                                     labels={"Valor": "Valor do IMC"},
                                     color_discrete_sequence=["#27ae60"], # Cor base para o seu IMC
                                     range_y=[0, 45]) # Ajusta o range para melhor visualiza√ß√£o

                        # Adiciona as faixas de IMC como ret√¢ngulos no gr√°fico
                        fig.add_hrect(y0=18.5, y1=24.9, fillcolor="#2ecc71", opacity=0.2, annotation_text="Normal", annotation_position="top left")
                        fig.add_hrect(y0=25, y1=29.9, fillcolor="#f1c40f", opacity=0.2, annotation_text="Sobrepeso", annotation_position="top left")
                        fig.add_hrect(y0=30, y1=34.9, fillcolor="#e67e22", opacity=0.2, annotation_text="Obesidade I", annotation_position="top left")
                        fig.add_hrect(y0=35, y1=39.9, fillcolor="#d35400", opacity=0.2, annotation_text="Obesidade II", annotation_position="top left")
                        fig.add_hrect(y0=40, y1=float('inf'), fillcolor="#c0392b", opacity=0.2, annotation_text="Obesidade III", annotation_position="top left")
                        fig.add_hrect(y0=0, y1=18.4, fillcolor="#3498db", opacity=0.2, annotation_text="Abaixo do Peso", annotation_position="top left")


                        st.plotly_chart(fig, use_container_width=True)

                    with col_res2:
                        st.markdown(calc.obter_dicas(classificacao, idade))

                        with st.expander("üîç Refer√™ncias Cient√≠ficas", expanded=True):
                            st.markdown(calc.obter_resumos())

        except Exception as e:
            st.error(f"Erro: {str(e)}")

# Rodap√©
st.markdown("---")
st.markdown("""
    **Desenvolvido por:** Marcia Romanato
""")